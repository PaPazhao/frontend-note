(window.webpackJsonp=window.webpackJsonp||[]).push([[36],{445:function(t,r,a){"use strict";a.r(r);var s=a(2),o=Object(s.a)({},(function(){var t=this,r=t._self._c;return r("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[r("h1",{attrs:{id:"题目"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#题目"}},[t._v("#")]),t._v(" 题目")]),t._v(" "),r("p",[t._v("for 和 forEach 哪个更快")]),t._v(" "),r("h1",{attrs:{id:"答案"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#答案"}},[t._v("#")]),t._v(" 答案")]),t._v(" "),r("p",[r("strong",[t._v("for")]),t._v(" 更快, 因为 forEach 每次都要创建函数需要开销")]),t._v(" "),r("h2",{attrs:{id:"创建函数需要开销"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#创建函数需要开销"}},[t._v("#")]),t._v(" 创建函数需要开销")]),t._v(" "),r("p",[t._v("一般来讲,越是简单的语法性能越好. 那些高级的语法糖的写法通常在执行效率上比不上简单的实现. for 循环就是单纯的索引遍历, 而 forEach 每次遍历都要创建一个函数,函数需要创建对象,需要配置作用域上下文,所有会比单纯的 for 慢.")]),t._v(" "),r("p",[t._v("forEach 虽然性能比 for 略差,但是代码的可读性更好开发中用的更多. 开发中不能仅仅考虑性能,再说这点性能基本差不了多少.")])])}),[],!1,null,null,null);r.default=o.exports}}]);